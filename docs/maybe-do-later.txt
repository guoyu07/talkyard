When doing these things, search for the tag too e.g. "[subcats]".


Instead of this file, maybe use a combination of:
 - https://github.com/dspinellis/git-issue   wow! and source code with  {{ {1  vi folds
 (- https://git-scm.com/docs/git-notes? )
 (- https://github.com/google/git-appraise )

[subcats]
Implement sub categories.

[sw]
Service worker.

[privacy-badger]:
Privacy Badger doesn't like transient session cookies, currently.
(See https://github.com/EFForg/privacybadger/issues/2003#issuecomment-391745819  bullet point 3. )
So maybe change from csrf Double Submit Cookie, to Encrypted Token Pattern?
https://www.owasp.org/index.php/Cross-Site_Request_Forgery_(CSRF)_Prevention_Cheat_Sheet#Encrypted_Token_Patternp

[pps]
Rename User to Participant and User to Member.  Participant = Guest or Member, Member = User or Group.
Rename variables named like "member" to "user", "memberOrGroup" to "member", "user" to "participant"
Rename "indie" to user" and "people" to "members"

[no-email]:
Let people create accounts without specifying any email address. Like at Reddit.


[reenable-akismet]:
For some reason I disabled Akismet (why? when refactoring to save time?). Enable it again.


[flat-comments]:
Change layout of problem type topics to traditional forum flat comments layout.
& use for formal messages too, or maybe repl w chat?

[editor-drafts]:
When editing a post, ask "Continue editing draft? [Yes, resume draft] [No, ignore draft (but keep it)]"
instead of always opening the old draft. Because otherwise sometimes old edits I didn't want, reappears.
How do that, UX wise? Maybe ask, when *opening* instead of when *saving*? and always
save a draft by default? Because maybe short of time when saving (e.g. need to run and
catch the subway, happens to me all the time) then it's annoying with questions.

[sidexpsite]:
Add session expiration time config value.

[relfollow]:
Add a 'rel=follow links to domains: ...' config value,
so peope can follow links to their own domains.
Domains where rel=nofollow should not be added to links.
Will be applied to sub domains too, e.g. if you type `ex.com`, `sub.ex.com` will also
have rel=nofollow removed.
You should add the address of this forum, and your main website (if any),
so search engines like Google, Bing, Yandex, Baidu will find all content.


[rand-page-id], [rand-user-id]:
Let outwardly visible page and user ids, be random numbers, to prevent
discovery of pages & people by iterating through all ids in the url.
64 bit random ids? or 32 bits + stricter rate limiting?

[custom-groups]
Search for that tag.

[subcomms]
Improve sub communities, e.g. selecting a category across all sub communities,
not only the current one.

Performance tests:
 "Capture a timeline trace of your site to help diagnose performance issues."
 https://github.com/GoogleChrome/puppeteer


[onesocket]
Subscribe to live-updates via a "shared web worker" so each browser gets its own connection,
rather than each browser tab.  See e.g.:
https://stackoverflow.com/questions/9554896/sharing-websocket-across-browser-tabs
websearch for e.g. "chrome all tabs share websocket"


[canonical-username]
[CANONUN] [5WKB23Z]
Rename theUsername to exactUsername? — it'll be how the username is displayed,
e.g. `jane_doe` or `jane.doe`, and always possible to login with that exact username.
Add canonicalUsername, which is: lowercase, and /[._-]+/ changed to '_'
so there's nothing but: [a-z0-9_]+ left.
By default, one can type whatever [_.-] when logging in, and it'll be first checked against
the exact username, and then [_.-]+ changed to '_' and compared with the canonical username.
And won't be able to create new accounts that have the same canonical useranme, as an already existing.
So logging in as Jane Doe works with: 'jane.doe', 'jane-doe', 'jane_doe'. And also for mentions,
so all these work: `@jane.doe @jane-doe @jane_doe` — it'll be the same person.
However, `jan.edoe` is someone else. That canonical username is different ('_' in a different place).

[username-starts-with-_] ?
https://github.com/discourse/discourse/commit/262f561a877e0296d7ca7f6ec9f27edd0d30ca8e
https://github.com/discourse/discourse/commit/90351348ec3c0b1872aa680c0c9ddd5271e3740b
https://meta.discourse.org/t/usernames-with-periods-are-changed-to-underscore/17168/8  . –> _


[canonical-email]
Avoid accidentally splitting an account into two, because sometimes '.' sometimes no '.'
when logging in with Gmail. Also, @gmail.com and @googlemail.com are the same.
https://support.google.com/mail/answer/10313?hl=en
Real life example of this happening:
https://meta.discourse.org/t/discourse-creates-new-users-if-dots-are-present-absent-in-google-email-address-when-logging-in-using-google/66151
Good approach?: https://stackoverflow.com/a/51344711/694469

Add canonical email? [canonical-email] So  dotty.addr.ess@googlemail also
saved as  dottyaddress@gmail.com, and if logs in with or without dots,
we'll know it's the same person? However, if types  some.name+tags@gmail.com,
then one *intentionally* added +something, and then treat as separate addr?
so can create different accounts for testing. (Spam detection could just
be aware that x+something and x+something2 and x+... are all the same accounts.)
If not, then sometimes people sign up manually, say, without dots. And then,
later, the community adds Gmail OpenAuth, and the same person signs in
with Google, and Google sends the addr via OpenAuth *with* dots, and this would
result in two different accounts for the same person, and confusion ("Where are
all my old posts?").

[one-db-writer]
Prevent all PostgreSQL serialization errors, by doing all writes from a single actor, and
use message passing & async replies?


[change-author]
Make it possible to change the author of a post to someone else. Or change edited-by to another user id.

[assign-posts]
Assign topics and posts to people.
Why assign a post? Because someone might ask a good question, in a longer discussion, and nice
to know & remember who will try to answer it, later.

[whispers]
(Much later. Not within -18.)
Inspired by Discourse. Read a bit more about how they do it.
Add whisper_to_user_id  post3 column. Default is to staff.
Already added:  drafts3.reply_whisper_to_user_id  column.
Trusted members? (full memers?) can whisper to any group (or person?) not only to staff.
  E.g. whisper to a group of category moderators for dealing with issues in that category.
Or a staff member whispers to the question asker, in a support topic: the staff asks for tech
  details; then the maybe new-member can reply, and no one else sees hens tech details.
  (The UX would need to make it very clear that no one but staff can see the reply.)
Staff always see all whispers.
All whisper post nrs have negative ids? And are never incld when rendering & caching a page.
Only loaded lazily when the current user happen to be some kind of staff (e.g. global mod,
or spceific category moderator) or for some reason may see the whisper.
Do not add any special post type, for whispers. The whisper_to_user_id field is enough? If adds, then, always show reply-to-op whispers as Progr type message?
A whole topic cannot be a whisper. Instead, group direct-message the staff, or category mods.
Don't bump page if whisper post. Do send notfs to receivers though (e.g. staff members).
A user's first few whispers to non-staff: Maybe should never be shown, until reviewed by staff. High risk for weird messages?


[tiny-dialog]
Find (or create?) a tiny modal dialog React class that can be included in slim-bundle.js,
so can open error dialog also if couldn't load more-bundle.js from the server.
Or cache more-bundle.js: PWA and service worker.


[manydrafts]
If there're many drafts for the same thing, show them in a list and let the user choose which
one to continue editing. (Rather than just picking a random one.)


SECURITY Use HMAC. Not SHAX. Need not fix urgently. Prevents extension attacks
